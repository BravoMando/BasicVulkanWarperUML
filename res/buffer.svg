<?xml version="1.0" encoding="us-ascii" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="755px" preserveAspectRatio="none" style="width:812px;height:755px;background:#FFFFFF;" version="1.1" viewBox="0 0 812 755" width="812px" zoomAndPan="magnify"><defs/><g><!--class Buffer--><g id="elem_Buffer"><rect codeLine="1" fill="#F1F1F1" height="734.7656" id="Buffer" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="791" x="7" y="7"/><ellipse cx="379.25" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M382.0156,18.875 Q382.1719,18.6563 382.3594,18.5469 Q382.5469,18.4375 382.7656,18.4375 Q383.1406,18.4375 383.375,18.7031 Q383.6094,18.9531 383.6094,19.5625 L383.6094,21.0156 Q383.6094,21.625 383.375,21.8906 Q383.1406,22.1563 382.7656,22.1563 Q382.4219,22.1563 382.2188,21.9531 Q382.0156,21.7656 381.9063,21.25 Q381.8594,20.8906 381.6719,20.7031 Q381.3438,20.3281 380.7344,20.1094 Q380.125,19.8906 379.5,19.8906 Q378.7344,19.8906 378.0938,20.2188 Q377.4688,20.5469 376.9688,21.2969 Q376.4844,22.0469 376.4844,23.0781 L376.4844,24.1719 Q376.4844,25.4063 377.375,26.2344 Q378.2656,27.0469 379.8594,27.0469 Q380.7969,27.0469 381.4531,26.7969 Q381.8438,26.6406 382.2656,26.2031 Q382.5313,25.9375 382.6719,25.8594 Q382.8281,25.7813 383.0313,25.7813 Q383.3594,25.7813 383.6094,26.0469 Q383.875,26.2969 383.875,26.6406 Q383.875,26.9844 383.5313,27.3906 Q383.0313,27.9688 382.2344,28.2969 Q381.1563,28.75 379.8594,28.75 Q378.3438,28.75 377.1406,28.125 Q376.1563,27.625 375.4688,26.5625 Q374.7813,25.4844 374.7813,24.2031 L374.7813,23.0469 Q374.7813,21.7188 375.3906,20.5781 Q376.0156,19.4219 377.1094,18.8125 Q378.2031,18.1875 379.4375,18.1875 Q380.1719,18.1875 380.8125,18.3594 Q381.4688,18.5156 382.0156,18.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="38" x="399.75" y="28.7285">Buffer</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="797" y1="39" y2="39"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="50.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="27" y="57.5332">Device &amp;r_Device;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="67.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="191" x="27" y="75.1426">VkDeviceSize m_InstanceSize;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="85.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="27" y="92.752">uint32_t m_InstanceCount;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="103.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="231" x="27" y="110.3613">VkBufferUsageFlags m_UsageFlags;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="120.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="321" x="27" y="127.9707">VkMemoryPropertyFlags m_MemoryPropertyFlags;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="138.3516"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="27" y="145.5801">VkDeviceSize m_BufferSize;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="155.9609"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="257" x="27" y="163.1895">VkBuffer m_Buffer = VK_NULL_HANDLE;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="173.5703"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="324" x="27" y="180.7988">VkDeviceMemory m_Memory = VK_NULL_HANDLE;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="191.1797"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="27" y="198.4082">void *m_Mapped = nullptr;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="208.7891"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="27" y="216.0176">VkDeviceSize m_AlignmentSize;</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="797" y1="223.0938" y2="223.0938"/><ellipse cx="18" cy="237.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="474" x="27" y="241.627">Buffer(Device &amp;device, VkDeviceSize instanceSize, uint32_t instanceCount,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="765" x="27" y="259.2363">VkBufferUsageFlags usageFlags, VkMemoryPropertyFlags memoryPropertyFlags, VkDeviceSize minOffsetAlignment = 1);</text><ellipse cx="18" cy="272.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="60" x="27" y="276.8457">~Buffer();</text><ellipse cx="18" cy="290.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="27" y="294.4551">Buffer(const Buffer &amp;) = delete;</text><ellipse cx="18" cy="307.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="271" x="27" y="312.0645">Buffer &amp;operator=(const Buffer &amp;) = delete;</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="27" y="329.6738">&#160;</text><ellipse cx="18" cy="343.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="329" x="27" y="347.2832">inline VkBuffer GetBuffer() const { return m_Buffer; }</text><ellipse cx="18" cy="360.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="382" x="27" y="364.8926">inline void *GetMappedMemory() const { return m_Mapped; }</text><ellipse cx="18" cy="378.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="432" x="27" y="382.502">inline uint32_t GetInstanceCount() const { return m_InstanceCount; }</text><ellipse cx="18" cy="395.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="442" x="27" y="400.1113">inline VkDeviceSize GetInstanceSize() const { return m_InstanceSize; }</text><ellipse cx="18" cy="413.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="481" x="27" y="417.7207">inline VkDeviceSize GetAlignmentSize() const { return m_InstanceSize; } /*?*/</text><ellipse cx="18" cy="431.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="478" x="27" y="435.3301">inline VkBufferUsageFlags GetUsageFlags() const { return m_UsageFlags; }</text><ellipse cx="18" cy="448.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="632" x="27" y="452.9395">inline VkMemoryPropertyFlags GetMemoryPropertyFlags() const { return m_MemoryPropertyFlags; }</text><ellipse cx="18" cy="466.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="412" x="27" y="470.5488">inline VkDeviceSize GetBufferSize() const { return m_BufferSize; }</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="27" y="488.1582">&#160;</text><ellipse cx="18" cy="501.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="499" x="27" y="505.7676">VkResult Map(VkDeviceSize size = VK_WHOLE_SIZE, VkDeviceSize offset = 0);</text><ellipse cx="18" cy="519.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="27" y="523.377">void Unmap();</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="27" y="540.9863">&#160;</text><ellipse cx="18" cy="554.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="639" x="27" y="558.5957">void WriteToBuffer(const void *data, VkDeviceSize size = VK_WHOLE_SIZE, VkDeviceSize offset = 0);</text><ellipse cx="18" cy="571.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="507" x="27" y="576.2051">VkResult Flush(VkDeviceSize size = VK_WHOLE_SIZE, VkDeviceSize offset = 0);</text><ellipse cx="18" cy="589.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="532" x="27" y="593.8145">VkResult Invalidate(VkDeviceSize size = VK_WHOLE_SIZE, VkDeviceSize offset = 0);</text><ellipse cx="18" cy="607.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="288" x="27" y="611.4238">void WriteToIndex(const void *data, int index);</text><ellipse cx="18" cy="624.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="194" x="27" y="629.0332">VkResult FlushIndex(int index);</text><ellipse cx="18" cy="642.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="27" y="646.6426">VkResult InvalidateIndex(int index);</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="27" y="664.252">&#160;</text><ellipse cx="18" cy="677.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="707" x="27" y="681.8613">VkDescriptorBufferInfo GetDescriptorBufferInfo(VkDeviceSize size = VK_WHOLE_SIZE, VkDeviceSize offset = 0);</text><ellipse cx="18" cy="695.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="416" x="27" y="699.4707">VkDescriptorBufferInfo GetDescriptorBufferInfoForIndex(int index);</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="27" y="717.0801">&#160;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="727.4609"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="575" x="27" y="734.6895">VkDeviceSize GetAlignment(VkDeviceSize instanceSize, VkDeviceSize minOffsetAlignment);</text></g><!--SRC=[hLLRRzem57xdLvmd18ofkpmYDBK3rcYqdTP1fMfI52KdpCAn8yT1wn3xxNFYO73Ym3OH2P9p-yxnkJcaGPR1JHx7A3hR3gZdLKNs9hWX8K8tAjz3MAurvv7yGY0iam7Jn11omkJxTxuqx8yyPt9OuksVvLhZBh9WXJCQh3B8pMU1VeS95ozV14zHo1UjaJHvjK0ImXxYE4DvJScA9SWaZE5jVrITvVllwZI6Kz4XLw5M17JxoYX2YX9jDUWMdWF9nVY4HML262KCpK7X4ygzSz36Mn0eSy4WyRLa13lRUCD910DbUHUaAKOw9ovxBM_Ocqee2E-u62uCIw41PQNv2AwWJw4LyhDWfbf_YGPNWm-3AtUYZpfA8Hye5-n1wWZHrO55APfiPqMQQcVJe0_GbeE3j02ga9RhhvZbL8BgW9w5bnL_OrX-zfzk7-PJ_z5xdjQcXPUZefJUc7aeEsx14eNMDwrSCfy4aVYDMmEZ-pCAP513_Z_dvZ0pccS_UfT4zDWce4H5YXVBKfKGZqNuqv4FDNhgfsGjnzDs9xGE8JTLZUu4ir2GLAqaNHYFnRne9HV_CWdz5uypBbfYVmrRDT6IXBlsPT0xSSUSsVe7D_jxI_ZwQrJnRG1xmLGgPdlMTwE1Q6mSQwKODUTTvjmGxk2E9h_csWXr9UyNyxb_Utq_cK_hKDgRSTkghrjuVwCeDPPJcahH4fgrkKUTtHy0]--></g></svg>