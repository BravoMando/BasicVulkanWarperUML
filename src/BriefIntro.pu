@startuml BriefIntro

!theme aws-orange

start

partition #White/Orange App {

    group Window
        :glfwInit();
        :glfwWindowHint();
        :glfwCreateWindow();
        :glfwSetWindowUserPointer();
        :glfwSetFramebufferSizeCallback();
    end group

    group Device
        :CreateInstance();
        if(Device::s_EnableValidationLayer) then(<color:hotpink>true)
        :SetUpDebugMessenger();
        else(<color:red>false)
        endif
        :CreateSurface();
        :PickPhysicalDevice();
        :CreateLogicalDevice();
        :CreateCommandPool();
    end group

    group Renderer
        :RecreateSwapChain();

        group SwapChain
            :CreateSwapChain();
            :CreateImageViews();
            :CreateRenderPass();
            :CreateDepthResources();
            :CreateFrameBuffers();
            :CreateSyncObjects();
        end group

        :CreateCommandBuffers();

    end group

    group DescriptorPool

        :DescriptorPool::Builder().SetMaxSets().AddPoolSize().Build();

    end group

    partition #Pink/Yellow LoadGameObjects {
        group GameObject

            group Model

                :CreateModelFromFile();

                group Buffer
                    :CreateBuffer();
                end group

                note right
                    vertex buffer
                    index buffer
                end note

            end group

            :m_GameObjects.push_back(gameObjc);

            note right
                gameObj.sp_Model
                gameObj.m_ModelMatrix.translation
                gameObj.m_ModelMatrix.scale
                gameObj.m_ModelMatrix.roration
            end note

        end group
    }

    partition #Pink/Yellow run {
        group RenderSystem
            :CreatePipelineLayout();

            group GraphicsPipeline
                :CreateShaderModule();
                :VkPipelineShaderStageCreateInfo;
                :VkPipelineVertexInputStateCreateInfo;
                :VkPipelineInputAssemblyStateCreateInfo;
                :(dynamic optional)VkViewport viewport;
                :(dynamic optional)VkRect2D scissor;
                :VkPipelineViewportStateCreateInfo;
                :VkPipelineRasterizationStateCreateInfo;
                :VkPipelineMultisampleStateCreateInfo;
                :VkPipelineColorBlendAttachmentState;
                :VkPipelineColorBlendStateCreateInfo;
                :VkPipelineDepthStencilStateCreateInfo;
                :VkDynamicState;
                :VkPipelineDynamicStateCreateInfo;
                :VkPipelineLayout;
                :VkRenderPass;
                :uint32_t subpass;
            end group

        end group

        group Camera
            :SetView();
            :SetProjection();
        end group

        group KeyboardController
            :void MoveInPlaneXZ();
        end group

        group Buffer
            :CreateBuffer();

            note right
                uniform buffer
            end note

        end group

        group DescriptorSetLayout
            :DescriptorSetLayout::Builder().AddBinding().Build();
        end group

        group DescriptorWriter
            :DescriptorWriter().WriteBuffer().Build();
        end group

        group WhileLoop
            while(!m_Window.ShouldClose()) is(<color:hotpink>true)
                :glfwPollEvents();
                :controller.MoveInPlaneXZ(m_Window.GetWindowHandle(),frameTime, viewObject);
                :camera.SetViewMat();
                :camera.SetProjectionMat();
                :UpdateUniformBuffers();
                note right
                    Copy specified data into uniform buffer memory
                    Flush memory for non-coherent memory
                end note
                :m_Renderer.BeginFrame();
                :m_Renderer.BeginRenderPass();
                :RenderSystem.RenderGameObjects();
                note right
                    #BindPipeline
                    #BindDescriptorSets
                    #PushConstants
                    #BindVertexBuffer
                    #BindIndexBuffer
                    #Draw
                end note
                :m_Renderer.EndRenderPass();
                :m_Renderer.EndFrame();
            endwhile(<color:hotpink>false)
                :vkDeviceWaitIdle();
        end group
    }

    partition #Pink/Yellow clean {
        :clean();
    }

}

:exit();

stop

@enduml