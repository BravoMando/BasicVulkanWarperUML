@startuml
struct [nested]Vertex
{
    glm::vec3 position{};
    glm::vec3 color{};
    glm::vec3 normal{};
    glm::vec2 uv{};

    static std::vector<VkVertexInputBindingDescription> GetBindingDescriptions();
    static std::vector<VkVertexInputAttributeDescription> GetAttributeDescriptions();

    inline bool operator==(const Vertex &other) const;
}

struct [nested]Builder
{
    std::vector<Vertex> vertices{};
    std::vector<uint32_t> indices{};

    void LoadModelFromFile(const std::string &FilePath);

}

class Model
{
    + Model(Device &device, const Builder &builder);
    + \~Model();
    + Model(const Model &) = delete;
    + Model &operator=(const Model &) = delete;

    + void Bind(VkCommandBuffer commandBuffer);
    + void Draw(VkCommandBuffer commandBuffer);

    + {static} std::unique_ptr<Model> CreateModelFromFile(Device &device, const std::string &FilePath);

    - void CreateVertexBuffers(const std::vector<Vertex> &vertices);
    - void CreateIndexBuffers(const std::vector<uint32_t> &indices);

    + [nested] struct Vertex;
    + [nested] struct Builder;

    - Device &r_Device;
    - std::unique_ptr<Buffer> up_VertexBuffer{};
    - uint32_t m_VertexCount;
    - bool m_HasIndexBuffer = false;
    - std::unique_ptr<Buffer> up_IndexBuffer{};
    - uint32_t m_IndexCount;
}
@enduml