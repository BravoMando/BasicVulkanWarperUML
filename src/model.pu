@startuml
struct Vertex
{
    glm::vec3 Position;
    glm::vec3 Color;
    static std::vector<VkVertexInputBindingDescription> GetBindingDescriptions();
    static std::vector<VkVertexInputAttributeDescription> GetAttributeDescriptions();
}

struct Builder
{
    std::vector<Vertex> vertices{};
    std::vector<uint32_t> indices{};
}

class Model
{
    + Model(Device &device, const Builder &builder);
    + \~Model();
    + Model(const Model &) = delete;
    + Model &operator=(const Model &) = delete;
    + void Bind(VkCommandBuffer commandBuffer);
    + void Draw(VkCommandBuffer commandBuffer);

    - void CreateVertexBuffers(const std::vector<Vertex> &vertices);
    - void CreateIndexBuffers(const std::vector<uint32_t> &indices);

    - Device &r_Device;
    - VkBuffer m_VertexBuffer;
    - VkDeviceMemory m_VertexBufferMemory;
    - uint32_t m_VertexCount;
    - bool m_HasIndexBuffer = false;
    - VkBuffer m_IndexBuffer;
    - VkDeviceMemory m_IndexBufferMemory;
    - uint32_t m_IndexCount;
}
@enduml